NAME: ICE_Robotic_Arm;


CONTRACT Target:
    output boolean variable rpick;
    output boolean variable rplace;
    input boolean variable picked;
    input boolean variable placed;

    Assumptions:
        ~picked & ~placed;
        []<>(picked);
        []<>(placed);
    Guarantees:
        []((!picked & !placed) -> X(rpick));
        []((picked & !placed) -> X(rplace));


CONTRACT Mission:
    output boolean variable rpick;
    output boolean variable rplace;
    output integer (0:4) variable xtarget;
    output integer (0:4) variable ytarget;
    output integer (0:4) variable desired_angle;

    input boolean variable picked;
    input boolean variable placed;

    Assumptions:
        ~picked & ~placed;
        []<>(picked);
        []<>(placed);
    Guarantees:
        []((!picked & !placed) -> X(rpick));
        []((!picked & !placed) -> X(xtarget=0));
        []((!picked & !placed) -> X(ytarget=0));
        []((!picked & !placed) -> X(desired_angle=0));

        []((picked & !placed) -> X(rplace));
        []((picked & !placed) -> X(xtarget=1));
        []((picked & !placed) -> X(ytarget=1));
        []((picked & !placed) -> X(desired_angle=3));

CONTRACT Coordinator:
    input boolean variable rpick;
    input boolean variable rplace;

    input boolean variable picked;
    input boolean variable placed;

    input boolean variable adone;
    input boolean variable pdone;

    output boolean variable cmd_pick;
    output boolean variable cmd_place;

    input boolean variable grip;
    
    Assumptions:
        !rpick;
        !rplace;
        !placed;
        !picked;
        !adone;
        !pdone;
        !grip;

        []<>(pdone & adone);

        []((!picked & !placed) -> X(rpick));
        []((picked & !placed) -> X(rplace));
        [](!rpick | !rplace);

    Guarantees:
        !cmd_pick;
        !cmd_place;
        [](!pdone -> (!cmd_pick & ! cmd_place));
        [](!adone -> (!cmd_pick & !cmd_place));

        []((adone & pdone & rpick & ~grip) -> (cmd_pick));
        []((adone & pdone & rplace & grip) -> (cmd_place));

CONTRACT Move:
    input integer (0:4) variable xpos;
    input integer (0:4) variable ypos;

    input integer (0:4) variable xtarget;
    input integer (0:4) variable ytarget;

    input boolean variable request;
    output boolean variable pdone;

    # Commands:
    # 0 - stay still;
    # 1 - move up: increase x;
    # 2 - move down: decrease x;
    # 3 - move right: increase y;
    # 4 - move left: decrease y;
    output integer (0:4) variable command;

    Assumptions:
        xpos = 0;
        ypos = 0;
        xtarget = 0;
        ytarget = 0;
        [](command = 0 -> (xpos' = xpos & ypos' = ypos));
        [](command = 1 -> (xpos' = xpos + 1 & ypos' = ypos));
        [](command = 2 -> (xpos = xpos' + 1 & ypos' = ypos));
        [](command = 3 -> (ypos' = ypos + 1 & xpos' = xpos));
        [](command = 4 -> (ypos = ypos + 1 & xpos' = xpos));

    Guarantees:
        command = 0;
        [](xpos = 0 -> command != 2);
        [](xpos = 4 -> command != 1);
        [](ypos = 0 -> command != 4);
        [](ypos = 4 -> command != 3);
        []((xpos = xtarget & ypos = ytarget) -> pdone);
        []((xpos != xtarget | ypos != ytarget) -> !pdone);
        []<>(xpos = xtarget & ypos = ytarget);



CONTRACT Turn:
    output boolean variable adone;

    input integer (0:15) variable desired_angle;
    input integer (0:15) variable angle;

    output integer (0:2) variable command;

    Assumptions:
        [](command = 1 -> angle' = angle + 1);
        [](command = 2 -> angle = angle' + 1);
        [](command = 0 -> angle' = angle);

    Guarantees:
        command = 0;
        []((angle = desired_angle) -> adone);
        []((angle != desired_angle) -> !adone);
        []<>(angle = desired_angle);

CONTRACT Pick:
    input boolean variable cmd_pick;
    output boolean variable picked;
    output boolean variable pick_requested;
    output boolean variable grip;

    Assumptions:
        ~cmd_pick;

    Guarantees:
        ~picked /\ ~pick_requested /\ ~grip;
        [](~pick_requested -> ~picked);
        [](pick_requested -> X(pick_requested));
        [](picked -> X(picked));
        [](cmd_pick -> X(pick_requested));
        [](pick_requested -> X(picked));
        [](~picked -> ~grip);
        [](picked -> grip);
        
CONTRACT Place:
    input boolean variable cmd_place;
    output boolean variable placed;
    output boolean variable place_requested;

    Assumptions:
        ~cmd_place;

    Guarantees:
        ~placed /\ ~place_requested;
        [](~place_requested -> ~placed);
        [](place_requested -> X(place_requested));
        [](placed -> X(placed));
        [](cmd_place -> X(place_requested));
        [](place_requested -> X(placed));
